#-------------------------------------
# Inicialitzacions -------------------
#-------------------------------------
lcd.init(freq=15000000)
sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.set_vflip(1)
sensor.run(1)
sensor.set_vflip(1)
sensor.set_hmirror(1)
lcd.direction(0x60)
#Pins board sortida----------
key_pin15=15 # numero de pin en el pinout de maixduino del K210  ---> SENSOR Vibracions (OUT)
key_pin32=32 # numero de pin en el pinout de maixduino del K210  ---> LED (OUT)
key_pin24=24 # numero de pin en el pinout de maixduino del K210  ---> (OUT) trigger_pin=24
key_pin23=23 # numero de pin en el pinout de maixduino del K210  ---> (OUT) echo_pin=23

key_pin36=36 # numero de pin en el pinout de maixduino del K210  ---> (IN) Sensor moviment
fpioa = FPIOA()
fpioa.set_function(key_pin15, FPIOA.GPIO7)
fpioa.set_function(key_pin32, FPIOA.GPIO6)
fpioa.set_function(key_pin24, FPIOA.GPIO5)
fpioa.set_function(key_pin23, FPIOA.GPIO4)

key_gpio15=GPIO(GPIO.GPIO7,GPIO.OUT) # escriurem per aqui
key_gpio32=GPIO(GPIO.GPIO6,GPIO.OUT) # escriurem per aqui
key_gpio24=GPIO(GPIO.GPIO5,GPIO.OUT) # escriurem per aqui
key_gpio23=GPIO(GPIO.GPIO4,GPIO.IN) # llegirem per aqui

# Per escriure la instrucció es: key_gpioXX.value(0) on 0 es igual a 0Volts i 1= 3,3Volts al pin de sortida de la placa
# Per llegir tenim que assignar el valor a una variable, per exemple lectura_sensor, per tant l'instrucció seria:
# lectura_sensor = key_gpioXX.value()

# inicialitzacions pantalla i dades model----------------
lcd.init(freq=15000000)
sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QVGA)
sensor.set_vflip(1)
sensor.run(1)
sensor.set_vflip(1)
sensor.set_hmirror(1)
lcd.direction(0x60)
clock = time.clock()
classes = ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tvmonitor']
task = kpu.load(0x500000)
anchor = (1.889, 2.5245, 2.9465, 3.94056, 3.99987, 5.3658, 5.155437, 6.92275, 6.718375, 9.01025)
a = kpu.init_yolo2(task, 0.5, 0.3, 5, anchor)

#altres variables ---------------------
person_detected = False

#-------------------------------------
# Créditos Entrada -------------------
#-------------------------------------
img = image.Image()
img.draw_string(60, 100, "Treball de Recerca - 2020", scale=2)
img.draw_string(65, 110, "Míriam Sala", scale=2)
img.draw_string(65, 120, "Aina López", scale=2)
lcd.display(img)


#Bucle programa principal -------------------------


test_mode=False

if (test_mode):
    sensor = HCSR04(trigger_pin=24, echo_pin=23)
    distance = sensor.distance_cm()
    print('Distance:', distance, 'cm')

else:
    while(True):
        clock.tick()
        img = sensor.snapshot()
        code = kpu.run_yolo2(task, img)
        print(clock.fps())
        if code:
            for i in code:
                a=img.draw_rectangle(i.rect())
                a = lcd.display(img)
                key_gpio32.value(1)
                if classes[i.classid()] == 'person':
                    key_gpio15.value(1)
                    person_detected=True
                lcd.draw_string(i.x(), i.y(), classes[i.classid()], lcd.RED, lcd.WHITE)
                lcd.draw_string(i.x(), i.y()+12, '%f1.3'%i.value(), lcd.RED, lcd.WHITE)
        else:
            a = lcd.display(img)
            key_gpio32.value(0)
            if person_detected == True:
                person_detected = False
                key_gpio15.value(0)
    a = kpu.deinit(task)

